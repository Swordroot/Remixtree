<html>
<head>
  <link href="/css/bootstrap-theme.min.css" rel="stylesheet">
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/jquery-ui.min.css" rel="stylesheet">
  <script src="/javascript/jquery-3.1.1.min.js"></script>
  <script src="/javascript/jquery-ui.min.js"></script>
  <script src="/javascript/bootstrap.min.js"></script>
  <script src="/javascript/d3.min.js"></script>
  <script src="/javascript/createjs.min.js"></script>
  <style>
    .link {
     fill: none;
     stroke: #555;
     stroke-opacity: 0.4;
     stroke-width: 1.5px;
    }
  </style>
</head>
<body>
  <div id="dialog" title="メニュー">この動画を視聴しますか?それともRemixした動画を投稿しますか?</div>
<script>
// Set the dimensions and margins of the diagram
var margin = {top: 90, right: 30, bottom: 90, left: 20};
var width = window.innerWidth - this.margin.left - this.margin.right;
var height = window.innerHeight;

var tree = d3.tree().size([width - 400, height]);

var svg = createViz();

function createViz() {
  return d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + (margin.top) + ")");
}

//d3.json("/getTreeData/getTreeJSONFromId?treeId=1", function(error, data) {
d3.json("getTreeData.json", function(error, data) {
  var parsedData = data[0] || {};
  var root = d3.hierarchy(parsedData, function(d) { return d.children; });
  tree(root);
  var link = createLink();
  var node = createNode();
  var circle = createImage();

  function createLink() {
    return svg.selectAll(".link")
    .data(root.descendants().slice(1))
    .enter().append("path")
    .attr("class", "link")
    .style("stroke", function(d) { return "blue"; })
    .attr("d", function(d) {
      return "M" + d.x + "," + d.y / 2
      + "C" + (d.x + d.parent.x) / 2 + "," + d.y / 2
      + " " + (d.x + d.parent.x) / 2 + "," + d.parent.y / 2
      + " " + d.parent.x + "," + d.parent.y / 2;
    });
  }

  function createNode() {
    return svg.selectAll(".node")
      .data(root.descendants())
      .enter().append("g")
      .attr("class", function(d) { return "node" + (d.children ? " node--internal" : " node--leaf"); })
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y / 2 + ")"; });
    }

  function createImage() {
    return node.append("image")
      .attr("xlink:href", function(d) {
        var youtubeId = d.data.thumbnail.replace("https://i.ytimg.com/vi/", "").replace("/default.jpg", "");
        return "/images/ppap_thumbnail/" + youtubeId + ".jpg";
//        return d.data.thumbnail;
      })
      .attr("x", "-45px")
      .attr("y", "-60px")
      .attr("width", "90px")
      .attr("height", "120px")
      .on("click", function(d){
        console.log(d);
        $("#dialog").dialog({
          modal: true,
          buttons: {
　　　　     "動画を見る": function(){
                location.href = "/video/1450.webm"
//              location.href = "https://remixtreeview.mybluemix.net/watch.html?&v=0E00Zuayv9Q&t=14.9&v=5Ens7TZzgG0&t=15.3&v=_kNZeOupQK8&t=13.8&v=hcpI9auZmpI&t=6.9&v=AdpD_RRft2s&t=5&v=fjV91oI5cL0&t=0&v=Jn1f8Uocf1E&t=12.3&v=b1iNDME9oZM&t=1.1&v=ytbYLaZNVzk&t=2.4"
     　　　　},
            "動画を投稿する":function(){
              location.href = "/upload/Form?parentId=1"
//              location.href = "/upload"
  　　　　     $(this).dialog('close');
     　　　　}
          }
        });
//        location.href = "https://remixtreeview.mybluemix.net/watch.html?&v=0E00Zuayv9Q&t=14.9&v=5Ens7TZzgG0&t=15.3&v=_kNZeOupQK8&t=13.8&v=hcpI9auZmpI&t=6.9&v=AdpD_RRft2s&t=5&v=fjV91oI5cL0&t=0&v=Jn1f8Uocf1E&t=12.3&v=b1iNDME9oZM&t=1.1&v=ytbYLaZNVzk&t=2.4"
      });
  }
});
/*
var canvas = document.querySelector("canvas"),
    context = canvas.getContext("2d"),
    width = canvas.width,
    height = canvas.height;

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

d3.json("miserables.json", function(error, graph) {
  if (error) throw error;

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);

  d3.select(canvas)
      .call(d3.drag()
          .container(canvas)
          .subject(dragsubject)
          .on("start", jumpTo));
//          .on("start", dragstarted)
//          .on("drag", dragged)
//          .on("end", dragended));

  function ticked() {
    context.clearRect(0, 0, width, height);

    context.beginPath();
    graph.links.forEach(drawLink);
    context.strokeStyle = "#999";
    context.stroke();

    context.beginPath();
    graph.nodes.forEach(drawNode);
    context.fill();
    context.strokeStyle = "#fff";
    context.stroke();
  }

  function dragsubject() {
    return simulation.find(d3.event.x, d3.event.y);
  }
});

function dragstarted() {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d3.event.subject.fx = d3.event.subject.x;
  d3.event.subject.fy = d3.event.subject.y;
}

function dragged() {
  d3.event.subject.fx = d3.event.x;
  d3.event.subject.fy = d3.event.y;
}

function dragended() {
  if (!d3.event.active) simulation.alphaTarget(0);
  d3.event.subject.fx = null;
  d3.event.subject.fy = null;
}

function drawLink(d) {
  context.moveTo(d.source.x, d.source.y);
  context.lineTo(d.target.x, d.target.y);
}

function drawNode(d) {
  var img = new Image();
  img.src = d.image;
  context.moveTo(d.x + 3, d.y);
  context.drawImage(img, d.x, d.y);
  //context.arc(d.x, d.y, 3, 0, 2 * Math.PI);
}

function jumpTo(){
  location.href = "/tree/play";
}
*/

</script>
</body>
</html>